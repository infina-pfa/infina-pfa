import { useAppTranslation } from "@/hooks/use-translation";
import { chatMessageManager } from "@/lib/services-v2/chat-message-manager.service";
import { ComponentResponse } from "@/lib/types/onboarding.types";
import { useCallback } from "react";

interface UseOnboardingMessagesProps {
  conversationId: string | null;
  hasInitialHistorySaved: boolean;
  setHasInitialHistorySaved: (value: boolean) => void;
}

interface UseOnboardingMessagesReturn {
  saveChatMessage: (
    sender: "user" | "ai" | "system",
    content: string,
    componentId?: string,
    metadata?: Record<string, unknown>,
    critical?: boolean
  ) => Promise<void>;
  saveInitialConversationHistory: () => Promise<void>;
  getResponseText: (response: ComponentResponse) => string;
}

export const useOnboardingMessages = ({
  conversationId,
  hasInitialHistorySaved,
  setHasInitialHistorySaved,
}: UseOnboardingMessagesProps): UseOnboardingMessagesReturn => {
  const { t, i18n } = useAppTranslation(["onboarding", "common"]);

  const saveChatMessage = useCallback(
    async (
      sender: "user" | "ai" | "system",
      content: string,
      componentId?: string,
      metadata?: Record<string, unknown>,
      critical: boolean = false
    ) => {
      try {
        if (!conversationId) {
          console.warn("No conversation ID available for saving message");
          return;
        }

        // Use the chat message manager for proper ordering
        await chatMessageManager.saveChatMessage(
          conversationId,
          sender,
          content,
          componentId,
          metadata,
          undefined, // customTimestamp
          critical
        );
      } catch (error) {
        console.error("Failed to save chat message:", error);
        // Don't throw error - continue with the flow even if saving fails
      }
    },
    [conversationId]
  );

  const saveInitialConversationHistory = useCallback(async () => {
    try {
      if (!conversationId) {
        console.warn("No conversation ID available for saving initial history");
        return;
      }

      if (hasInitialHistorySaved) {
        console.log(
          "üìã Initial conversation history already saved, skipping..."
        );
        return;
      }

      console.log(
        "üíæ Saving initial conversation history with proper timestamps..."
      );

      // Use Vietnamese as default for now (same as showInitialWelcomeFlow)
      const isVietnamese = i18n.language === "vi" || true;

      // Create timestamps with clear separation (5 seconds apart) to ensure correct order
      const baseTime = Date.now() - 60000; // Start 1 minute ago
      const welcomeTimestamp = new Date(baseTime).toISOString();
      const stageSelectorTimestamp = new Date(baseTime + 5000).toISOString(); // +5 seconds

      console.log("üïê Using timestamps:", {
        welcome: welcomeTimestamp,
        stageSelector: stageSelectorTimestamp,
      });

      // 1. Save welcome message (earliest timestamp) - NEW STAGE-FIRST VERSION
      const fullWelcomeContent = isVietnamese
        ? "Xin ch√†o! T√¥i l√† Fina, c·ªë v·∫•n t√†i ch√≠nh AI c·ªßa b·∫°n ü§ù\n\nT√¥i ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n ki·ªÉm so√°t t∆∞∆°ng lai t√†i ch√≠nh c·ªßa m√¨nh v√† cung c·∫•p h∆∞·ªõng d·∫´n c·ª• th·ªÉ ph√π h·ª£p v·ªõi t√¨nh h√¨nh t√†i ch√≠nh hi·ªán t·∫°i c·ªßa b·∫°n.\n\n‚ú® ƒê·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t, h√£y cho t√¥i bi·∫øt b·∫°n ƒëang ·ªü giai ƒëo·∫°n n√†o trong h√†nh tr√¨nh t√†i ch√≠nh:"
        : "Hello! I'm Fina, your AI financial advisor ü§ù\n\nI'm here to help you take control of your financial future and provide specific guidance that fits your current financial situation.\n\n‚ú® To help you best, let me know what stage you're at in your financial journey:";

      // Use synchronous save for initial history to ensure correct order
      await chatMessageManager.saveChatMessage(
        conversationId,
        "ai",
        fullWelcomeContent,
        undefined,
        undefined,
        welcomeTimestamp,
        true // critical: initial setup message
      );

      // 2. Save decision tree component (2nd timestamp)
      const decisionTreeComponentId = `decision_tree_${Date.now()}`;
      const decisionTreeContent = isVietnamese
        ? "T√¥i s·∫Ω h·ªèi b·∫°n 2 c√¢u h·ªèi ng·∫Øn ƒë·ªÉ x√°c ƒë·ªãnh ch√≠nh x√°c ∆∞u ti√™n t√†i ch√≠nh c·ªßa b·∫°n:"
        : "I'll ask you 2 quick questions to accurately determine your financial priority:";

      await chatMessageManager.saveChatMessage(
        conversationId,
        "ai",
        decisionTreeContent,
        decisionTreeComponentId,
        {
          component: {
            type: "decision_tree",
            title: isVietnamese
              ? "H√£y x√°c ƒë·ªãnh ∆∞u ti√™n t√†i ch√≠nh c·ªßa b·∫°n"
              : "Let's determine your financial priority",
            context: {
              questions: [
                {
                  id: "high_interest_debt",
                  question: isVietnamese
                    ? "B·∫°n c√≥ b·∫•t k·ª≥ kho·∫£n n·ª£ n√†o, ch·∫≥ng h·∫°n nh∆∞ d∆∞ n·ª£ th·∫ª t√≠n d·ª•ng ho·∫∑c c√°c kho·∫£n vay c√° nh√¢n, v·ªõi l√£i su·∫•t cao h∆°n 8% kh√¥ng?"
                    : "Do you have any debt, such as credit card balances or personal loans, with an interest rate higher than 8%?",
                  explanation: isVietnamese
                    ? "Vui l√≤ng lo·∫°i tr·ª´ kho·∫£n th·∫ø ch·∫•p ch√≠nh ho·∫∑c c√°c kho·∫£n vay sinh vi√™n l√£i su·∫•t th·∫•p."
                    : "Please exclude your primary mortgage or low-interest student loans from this.",
                  yesLabel: isVietnamese ? "C√≥" : "Yes",
                  noLabel: isVietnamese ? "Kh√¥ng" : "No",
                },
                {
                  id: "emergency_fund",
                  question: isVietnamese
                    ? "N·∫øu b·∫°n m·∫•t ngu·ªìn thu nh·∫≠p ch√≠nh ng√†y h√¥m nay, b·∫°n c√≥ ƒë·ªß ti·ªÅn m·∫∑t trong t√†i kho·∫£n ti·∫øt ki·ªám d·ªÖ ti·∫øp c·∫≠n ƒë·ªÉ trang tr·∫£i t·∫•t c·∫£ c√°c chi ph√≠ sinh ho·∫°t thi·∫øt y·∫øu trong √≠t nh·∫•t ba th√°ng kh√¥ng?"
                    : "If you were to lose your primary source of income today, do you have enough cash in a readily accessible savings account to cover all of your essential living expenses for at least three months?",
                  explanation: isVietnamese
                    ? "Chi ph√≠ thi·∫øt y·∫øu bao g·ªìm nh√† ·ªü, th·ª±c ph·∫©m, ti·ªán √≠ch, giao th√¥ng v√† c√°c nhu c·∫ßu thi·∫øt y·∫øu kh√°c."
                    : "Essential expenses include housing, food, utilities, transportation, and other necessities.",
                  yesLabel: isVietnamese ? "C√≥" : "Yes",
                  noLabel: isVietnamese ? "Kh√¥ng" : "No",
                },
              ],
            },
            isCompleted: false,
          },
        },
        stageSelectorTimestamp,
        true // critical: initial setup message
      );

      console.log(
        "‚úÖ Successfully saved new stage-first conversation history in correct order"
      );
      setHasInitialHistorySaved(true);
    } catch (error) {
      console.error("‚ùå Failed to save initial conversation history:", error);
    }
  }, [
    conversationId,
    hasInitialHistorySaved,
    setHasInitialHistorySaved,
    i18n.language,
  ]);

  const getResponseText = useCallback(
    (response: ComponentResponse): string => {
      // First, check if response has a userMessage (our new detailed responses)
      if (response.userMessage) {
        return response.userMessage;
      }

      // Handle decision tree response
      if (response.determinedStage && response.answers) {
        const stageNames = {
          debt: "Get Out of Debt",
          start_saving: "Start Saving",
          start_investing: "Start Investing",
        };

        const stageName =
          stageNames[response.determinedStage as keyof typeof stageNames] ||
          response.determinedStage;
        return `Giai ƒëo·∫°n t√†i ch√≠nh: ${t(stageName, { ns: "onboarding" })}`;
      }

      // Handle stage selector response (legacy)
      if (response.selectedStage) {
        const stageNames = {
          debt: "Get Out of Debt",
          start_saving: "Start Saving",
          start_investing: "Start Investing",
        };

        const stageName =
          stageNames[response.selectedStage as keyof typeof stageNames] ||
          response.selectedStage;
        return `Selected stage: ${stageName}`;
      }

      // Handle expense breakdown response with detailed breakdown
      if (response.expenseBreakdown) {
        const breakdown = response.expenseBreakdown;
        const details: string[] = [];
        let total = 0;

        // Process all category expenses
        Object.entries(breakdown).forEach(([key, value]) => {
          if (typeof value === "number" && value > 0) {
            total += value;
            const formattedValue = value.toLocaleString("vi-VN");

            // Map common category IDs to display names
            const categoryNames: Record<string, string> = {
              housing: "Nh√† ·ªü (thu√™ nh√†/ƒëi·ªán/n∆∞·ªõc)",
              food: "ƒÇn u·ªëng",
              transport: "Di chuy·ªÉn",
              other: "Chi ti√™u kh√°c (gi·∫£i tr√≠, mua s·∫Øm, v.v.)",
            };

            const displayName = categoryNames[key] || key;
            details.push(`${displayName}: ${formattedValue} VND`);
          }
        });

        const formattedTotal = total.toLocaleString("vi-VN");
        const detailsText =
          details.length > 0 ? `\n- ${details.join("\n- ")}` : "";

        return `Chi ph√≠ h√†ng th√°ng:${detailsText}\n\nT·ªïng c·ªông: ${formattedTotal} VND`;
      }

      // Handle savings capacity response
      if (response.savingsCapacity) {
        const formattedAmount =
          response.savingsCapacity.toLocaleString("vi-VN");
        return `Monthly savings capacity: ${formattedAmount} VND`;
      }

      // Handle goal confirmation
      if (response.goalConfirmed !== undefined) {
        // Use userMessage if available, otherwise fallback to simple message
        if (response.userMessage) {
          return response.userMessage;
        }
        return response.goalConfirmed
          ? "Goal confirmed"
          : "Goal needs adjustment";
      }

      // Handle education content completion
      if (response.educationCompleted) {
        return response.textValue || "ƒê√£ ho√†n th√†nh n·ªôi dung gi√°o d·ª•c";
      }

      if (response.textValue) {
        return response.textValue;
      } else if (response.selectedOption) {
        return response.selectedOption;
      } else if (
        response.financialValue !== undefined &&
        response.financialValue !== null
      ) {
        // ‚ú® IMPROVED: More descriptive financial value formatting
        const formattedValue = response.financialValue.toLocaleString("vi-VN");
        return `${formattedValue} VND`;
      } else if (response.rating !== undefined && response.rating !== null) {
        return `Rated ${response.rating}/5`;
      } else if (
        response.sliderValue !== undefined &&
        response.sliderValue !== null
      ) {
        // Use unit from response if available, otherwise fallback to no unit
        const unit = response.sliderUnit || "";
        return unit
          ? `${response.sliderValue} ${unit}`
          : `${response.sliderValue}`;
      }
      return "Completed"; // More descriptive than "ok"
    },
    [t]
  );

  return {
    saveChatMessage,
    saveInitialConversationHistory,
    getResponseText,
  };
};
