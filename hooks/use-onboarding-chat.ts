import { useState, useEffect, useCallback, useRef } from "react";
import { 
  OnboardingState, 
  OnboardingMessage, 
  ComponentResponse,
  UseOnboardingChatReturn,
  UserProfile,
} from "@/lib/types/onboarding.types";
import { useAppTranslation } from "@/hooks/use-translation";
import { onboardingService } from "@/lib/services/onboarding.service";

export const useOnboardingChat = (
  userId: string,
  onComplete: () => void 
): UseOnboardingChatReturn => {
  const { t, i18n } = useAppTranslation(["onboarding", "common"]);
  
  // Core state
  const [state, setState] = useState<OnboardingState>({
    step: "ai_welcome",
    userProfile: { name: "" },
    chatMessages: [],
    currentQuestion: null,
    isComplete: false,
    conversationId: null,
    userId,
  });
  
  const [messages, setMessages] = useState<OnboardingMessage[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isAIThinking, setIsAIThinking] = useState(false);
  const [isStreaming, setIsStreaming] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasStartedAI, setHasStartedAI] = useState(false);
  const [hasInitialHistorySaved, setHasInitialHistorySaved] = useState(false);

  // Ref to prevent double initialization in Strict Mode
  const hasInitialized = useRef(false);

  // Initialize onboarding
  useEffect(() => {
    if (userId && !hasInitialized.current) {
      hasInitialized.current = true;
      initializeOnboarding();
    }
  }, [userId]);

  const initializeOnboarding = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const initialState = await onboardingService.initializeOnboarding(userId);
      setState(initialState);
      
      // Check if there's existing chat history
      if (initialState.conversationId) {
        const hasHistory = await onboardingService.hasExistingChatHistory(initialState.conversationId);
        
        if (hasHistory) {
          // Load existing chat history
          await loadChatHistory(initialState.conversationId);
        } else {
          // Show initial welcome message and introduction template WITHOUT calling AI
          showInitialWelcomeFlow();
        }
      } else {
        // Show initial welcome message if no conversation ID
        showInitialWelcomeFlow();
      }
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : t("initializationFailed");
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const loadChatHistory = async (conversationId: string) => {
    try {
      const { messages: chatHistory } = await onboardingService.loadChatHistory(conversationId);
      
      // Convert chat history to OnboardingMessage format - simplified version
      const onboardingMessages: OnboardingMessage[] = chatHistory.map((msg) => {
        const chatMsg = msg as {
          id: string;
          sender: 'user' | 'ai' | 'system';
          content: string;
          created_at: string;
          component_id?: string;
          metadata?: Record<string, unknown>;
        };
        
        // Note: Component reconstruction will be handled by the conversation flow
        // For now, just preserve the basic message structure
        const component = undefined;
        
        return {
          id: chatMsg.id,
          type: chatMsg.sender === 'user' ? 'user' : 'ai',
          content: chatMsg.content,
          timestamp: new Date(chatMsg.created_at),
          component,
          metadata: chatMsg.metadata
        };
      });
      
      setMessages(onboardingMessages);
      
      // Mark that initial history is already saved (since we loaded it from DB)
      if (onboardingMessages.length > 0) {
        setHasInitialHistorySaved(true);
      }
      
      // If we have chat history, user can continue from where they left off
      console.log(`‚úÖ Loaded ${onboardingMessages.length} messages from chat history`);
      
      // Check if there are any component messages that might need user interaction
      const componentMessages = onboardingMessages.filter(msg => 
        msg.metadata?.component
      );
      
      if (componentMessages.length > 0) {
        console.log(`üîß Found ${componentMessages.length} component messages in history`);
      }
      
      // If the last message is from AI and user hasn't responded, they can continue
      const lastMessage = onboardingMessages[onboardingMessages.length - 1];
      if (lastMessage?.type === 'ai') {
        console.log("üí¨ User can continue conversation from where they left off");
      }
      
    } catch (err) {
      console.error("‚ùå Failed to load chat history:", err);
      // If loading fails, show initial welcome flow
      showInitialWelcomeFlow();
    }
  };

  const saveChatMessage = async (
    sender: 'user' | 'ai' | 'system',
    content: string,
    componentId?: string,
    metadata?: Record<string, unknown>
  ) => {
    try {
      if (!state.conversationId) {
        console.warn("No conversation ID available for saving message");
        return;
      }
      
      // Use async save for better UX - doesn't block the UI
      await onboardingService.saveChatMessageAsync(
        state.conversationId,
        sender,
        content,
        componentId,
        metadata
      );
      
      console.log(`Queued ${sender} message for background processing`);
    } catch (error) {
      console.error("Failed to queue chat message:", error);
      // Don't throw error - continue with the flow even if saving fails
    }
  };

  const saveInitialConversationHistory = async () => {
    try {
      if (!state.conversationId) {
        console.warn("No conversation ID available for saving initial history");
        return;
      }

      if (hasInitialHistorySaved) {
        console.log("üìã Initial conversation history already saved, skipping...");
        return;
      }

      console.log("üíæ Saving initial conversation history with proper timestamps...");

      // Use Vietnamese as default for now (same as showInitialWelcomeFlow)
      const isVietnamese = i18n.language === 'vi' || true;

      // Create timestamps with clear separation (5 seconds apart) to ensure correct order
      const baseTime = Date.now() - 60000; // Start 1 minute ago
      const welcomeTimestamp = new Date(baseTime).toISOString();
      const suggestionTimestamp = new Date(baseTime + 5000).toISOString(); // +5 seconds
      const componentTimestamp = new Date(baseTime + 10000).toISOString(); // +10 seconds

      console.log("üïê Using timestamps:", {
        welcome: welcomeTimestamp,
        suggestion: suggestionTimestamp,
        component: componentTimestamp
      });

      // 1. Save welcome message (earliest timestamp)
      const fullWelcomeContent = isVietnamese 
        ? "Xin ch√†o! T√¥i l√† Fina, c·ªë v·∫•n t√†i ch√≠nh AI c·ªßa b·∫°n ü§ù\n\nT√¥i ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n ki·ªÉm so√°t t∆∞∆°ng lai t√†i ch√≠nh c·ªßa m√¨nh. T√¥i c√≥ th·ªÉ:\n‚Ä¢ Gi√∫p b·∫°n l·∫≠p ng√¢n s√°ch v√† theo d√µi chi ti√™u\n‚Ä¢ T∆∞ v·∫•n chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ ph√π h·ª£p\n‚Ä¢ H·ªó tr·ª£ l·∫≠p k·∫ø ho·∫°ch cho c√°c m·ª•c ti√™u t√†i ch√≠nh\n‚Ä¢ Ph√¢n t√≠ch t√¨nh h√¨nh t√†i ch√≠nh v√† ƒë∆∞a ra l·ªùi khuy√™n c√° nh√¢n h√≥a\n\nƒê·ªÉ b·∫Øt ƒë·∫ßu, t√¥i c·∫ßn t√¨m hi·ªÉu m·ªôt ch√∫t v·ªÅ b·∫°n. ƒêi·ªÅu n√†y s·∫Ω gi√∫p t√¥i cung c·∫•p l·ªùi khuy√™n ph√π h·ª£p nh·∫•t v·ªõi nhu c·∫ßu c·ªßa b·∫°n."
        : "Hello! I'm Fina, your AI financial advisor ü§ù\n\nI'm here to help you take control of your financial future. I can:\n‚Ä¢ Help you create budgets and track spending\n‚Ä¢ Advise on suitable investment strategies\n‚Ä¢ Support planning for financial goals\n‚Ä¢ Analyze your financial situation and provide personalized advice\n\nTo get started, I need to learn a bit about you. This will help me provide advice that best suits your needs.";

      // Use synchronous save for initial history to ensure correct order
      await onboardingService.saveChatMessage(
        state.conversationId,
        'ai',
        fullWelcomeContent,
        undefined,
        undefined,
        welcomeTimestamp
      );

      // 2. Save suggestion message (2nd timestamp)
      const fullSuggestionContent = isVietnamese
        ? "H√£y gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n b·∫°n nh√©! B·∫°n c√≥ th·ªÉ chia s·∫ª v·ªÅ:"
        : "Please introduce yourself! You can share about:";

      await onboardingService.saveChatMessage(
        state.conversationId,
        'ai',
        fullSuggestionContent,
        undefined,
        undefined,
        suggestionTimestamp
      );

      // 3. Save introduction component (3rd timestamp)
      const introComponentId = `introduction_template_${Date.now()}`;
      const introComponentContent = isVietnamese
        ? "Gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n b·∫°n"
        : "Introduce yourself";

      await onboardingService.saveChatMessage(
        state.conversationId,
        'ai',
        introComponentContent,
        introComponentId,
        {
          component: {
            type: "introduction_template",
            title: introComponentContent,
            context: {
              template: isVietnamese
                ? "T√¥i t√™n l√† Tu·∫•n, 24 tu·ªïi, ƒëang s·ªëng t·∫°i TPHCM. T√¥i l√†m vƒÉn ph√≤ng v·ªõi thu nh·∫≠p h√†ng th√°ng kho·∫£ng 10 tri·ªáu VND. Hi·ªán t·∫°i t√¥i mu·ªën s·ªõm ƒë·∫°t ƒë∆∞·ª£c t·ª± do t√†i ch√≠nh."
                : "My name is Devin, I'm 24 years old, living in New York. I work as a Software Engineer with a monthly income of about 5000 dollars. Currently, I want to get a house in New York.",
              suggestions: isVietnamese
                ? [
                    "T√¥i m·ªõi b·∫Øt ƒë·∫ßu t√¨m hi·ªÉu v·ªÅ qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n",
                    "T√¥i mu·ªën b·∫Øt ƒë·∫ßu ƒë·∫ßu t∆∞ nh∆∞ng kh√¥ng bi·∫øt b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢u",
                    "T√¥i c·∫ßn gi√∫p ƒë·ª° ƒë·ªÉ l·∫≠p ng√¢n s√°ch h√†ng th√°ng hi·ªáu qu·∫£"
                  ]
                : [
                    "I'm just starting to learn about personal finance management",
                    "I want to start investing but don't know where to begin",
                    "I need help creating an effective monthly budget"
                  ]
            },
            isCompleted: false
          }
        },
        componentTimestamp
      );

      console.log("‚úÖ Successfully saved complete initial conversation history in correct order");
      setHasInitialHistorySaved(true);
    } catch (error) {
      console.error("‚ùå Failed to save initial conversation history:", error);
    }
  };

  const showInitialWelcomeFlow = () => {
    // Use Vietnamese as default for now
    const isVietnamese = i18n.language === 'vi' || true; // Force Vietnamese for testing
    
    // Start with empty messages to show chat interface immediately
    setMessages([]);
    
    // Simulate AI thinking before first message
    setIsAIThinking(true);
    
    // Stream welcome message after a delay
    setTimeout(() => {
      setIsAIThinking(false);
      setIsStreaming(true);
      
      const welcomeMessage: OnboardingMessage = {
        id: `welcome-${Date.now()}`,
        type: "ai",
        content: "",
        timestamp: new Date(),
      };
      
      setMessages([welcomeMessage]);
      
      // Stream the welcome content character by character
      const fullWelcomeContent = isVietnamese 
        ? "Xin ch√†o! T√¥i l√† Fina, c·ªë v·∫•n t√†i ch√≠nh AI c·ªßa b·∫°n ü§ù\n\nT√¥i ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n ki·ªÉm so√°t t∆∞∆°ng lai t√†i ch√≠nh c·ªßa m√¨nh. T√¥i c√≥ th·ªÉ:\n‚Ä¢ Gi√∫p b·∫°n l·∫≠p ng√¢n s√°ch v√† theo d√µi chi ti√™u\n‚Ä¢ T∆∞ v·∫•n chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ ph√π h·ª£p\n‚Ä¢ H·ªó tr·ª£ l·∫≠p k·∫ø ho·∫°ch cho c√°c m·ª•c ti√™u t√†i ch√≠nh\n‚Ä¢ Ph√¢n t√≠ch t√¨nh h√¨nh t√†i ch√≠nh v√† ƒë∆∞a ra l·ªùi khuy√™n c√° nh√¢n h√≥a\n\nƒê·ªÉ b·∫Øt ƒë·∫ßu, t√¥i c·∫ßn t√¨m hi·ªÉu m·ªôt ch√∫t v·ªÅ b·∫°n. ƒêi·ªÅu n√†y s·∫Ω gi√∫p t√¥i cung c·∫•p l·ªùi khuy√™n ph√π h·ª£p nh·∫•t v·ªõi nhu c·∫ßu c·ªßa b·∫°n."
        : "Hello! I'm Fina, your AI financial advisor ü§ù\n\nI'm here to help you take control of your financial future. I can:\n‚Ä¢ Help you create budgets and track spending\n‚Ä¢ Advise on suitable investment strategies\n‚Ä¢ Support planning for financial goals\n‚Ä¢ Analyze your financial situation and provide personalized advice\n\nTo get started, I need to learn a bit about you. This will help me provide advice that best suits your needs.";
      
      let currentIndex = 0;
      const streamInterval = setInterval(() => {
        if (currentIndex < fullWelcomeContent.length) {
          const chunkSize = Math.floor(Math.random() * 4) + 2; // Random chunk size 2-5 characters
          currentIndex += chunkSize;
          
          setMessages(prev => prev.map(msg => 
            msg.id === welcomeMessage.id 
              ? { ...msg, content: fullWelcomeContent.slice(0, currentIndex) }
              : msg
          ));
        } else {
          clearInterval(streamInterval);
          setIsStreaming(false);
          
          // After welcome message completes, show thinking again before suggestion
          setTimeout(() => {
            setIsAIThinking(true);
            
            setTimeout(() => {
              setIsAIThinking(false);
              setIsStreaming(true);
              
              // Add suggestion message with streaming
              const suggestionMessage: OnboardingMessage = {
                id: `suggestion-${Date.now()}`,
                type: "ai",
                content: "",
                timestamp: new Date(),
              };
              
              setMessages(prev => [...prev, suggestionMessage]);
              
              const fullSuggestionContent = isVietnamese
                ? "H√£y gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n b·∫°n nh√©! B·∫°n c√≥ th·ªÉ chia s·∫ª v·ªÅ:"
                : "Please introduce yourself! You can share about:";
              
              let suggestionIndex = 0;
              const suggestionInterval = setInterval(() => {
                if (suggestionIndex < fullSuggestionContent.length) {
                  const chunkSize = Math.floor(Math.random() * 4) + 2;
                  suggestionIndex += chunkSize;
                  
                  setMessages(prev => prev.map(msg => 
                    msg.id === suggestionMessage.id 
                      ? { ...msg, content: fullSuggestionContent.slice(0, suggestionIndex) }
                      : msg
                  ));
                } else {
                  clearInterval(suggestionInterval);
                  setIsStreaming(false);
                  
                  // Show component after suggestion completes
                  setTimeout(() => {
                    // Add introduction template component with a fade-in effect
                    const introComponentId = `introduction_template_${Date.now()}`;
                    const introComponent: OnboardingMessage = {
                      id: `intro-component-${Date.now()}`,
                      type: "ai",
                      content: isVietnamese
                        ? "Gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n b·∫°n"
                        : "Introduce yourself",
                      timestamp: new Date(),
                      component: {
                        id: introComponentId,
                        type: "introduction_template",
                        title: isVietnamese
                          ? "Gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n b·∫°n"
                          : "Introduce yourself",
                        context: {
                          template: isVietnamese
                            ? "T√¥i t√™n l√† Tu·∫•n, 24 tu·ªïi, ƒëang s·ªëng t·∫°i TPHCM. T√¥i l√†m vƒÉn ph√≤ng v·ªõi thu nh·∫≠p h√†ng th√°ng kho·∫£ng 10 tri·ªáu VND. Hi·ªán t·∫°i t√¥i mu·ªën s·ªõm ƒë·∫°t ƒë∆∞·ª£c t·ª± do t√†i ch√≠nh."
                            : "My name is Devin, I'm 24 years old, living in New York. I work as a Software Engineer with a monthly income of about 5000 dollars. Currently, I want to get a house in New York.",
                          suggestions: isVietnamese
                            ? [
                                "T√¥i m·ªõi b·∫Øt ƒë·∫ßu t√¨m hi·ªÉu v·ªÅ qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n",
                                "T√¥i mu·ªën b·∫Øt ƒë·∫ßu ƒë·∫ßu t∆∞ nh∆∞ng kh√¥ng bi·∫øt b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢u",
                                "T√¥i c·∫ßn gi√∫p ƒë·ª° ƒë·ªÉ l·∫≠p ng√¢n s√°ch h√†ng th√°ng hi·ªáu qu·∫£"
                              ]
                            : [
                                "I'm just starting to learn about personal finance management",
                                "I want to start investing but don't know where to begin",
                                "I need help creating an effective monthly budget"
                              ]
                        },
                        isCompleted: false
                      }
                    };
                    
                    setMessages(prev => [...prev, introComponent]);
                    console.log("üìù Initial conversation flow completed (will be saved when user submits)");
                  }, 500); // Small delay before showing component
                }
              }, 15); // Faster streaming for shorter message
            }, 800); // Thinking delay before suggestion
          }, 1000); // Delay after welcome message
        }
      }, 20); // Streaming speed for welcome message
    }, 1500); // Initial delay to show chat interface first
  };

  const startOnboardingConversation = async (initialMessage: string, initialState: OnboardingState) => {
    console.log("Starting onboarding conversation with user input:", initialMessage);
    
    // ‚ú® IMPROVED: Use same conversation history mapping as processUserMessage
    const conversationHistory = messages.map(msg => {
      let content = msg.content || "";
      
      // For AI messages with components, include component context
      if (msg.type === "ai" && msg.component) {
        const component = msg.component;
        
        // Add component title and context to content
        content = `${content}${content ? "\n\n" : ""}[Component: ${component.type}]`;
        if (component.title) {
          content += `\nTitle: ${component.title}`;
        }
        
        // If component is completed, include the user's response
        if (component.isCompleted && component.response) {
          const responseText = getResponseText(component.response);
          content += `\nUser Response: ${responseText}`;
        }
      }
      
      return {
        id: msg.id,
        content: content,
        sender: msg.type === "user" ? "user" as const : "ai" as const,
        timestamp: msg.timestamp.toISOString(),
      };
    });
    
    // üîç DEBUG: Log conversation history at start
    console.log(`üîç Starting with full conversation history: ${conversationHistory.length} messages`);
    console.log("üìã Starting conversation history:");
    conversationHistory.forEach((msg, index) => {
      console.log(`${index + 1}. [${msg.sender}] (${msg.id}): "${msg.content}" (${msg.content.length} chars)`);
    });
    
    // Start AI conversation with the user's introduction
    await streamOnboardingAI({
      message: initialMessage,
      conversationHistory,
      userProfile: initialState.userProfile,
      currentStep: initialState.step
    });
    
    setHasStartedAI(true);
  };

  const sendMessage = useCallback(async (message: string) => {
    try {
      // Add user message
      const userMessage: OnboardingMessage = {
        id: `user-${Date.now()}`,
        type: "user",
        content: message,
        timestamp: new Date(),
      };
      
      setMessages(prev => [...prev, userMessage]);
      
      // Save user message to database
      await saveChatMessage('user', message);
      
      // If this is the first user message, start AI conversation
      if (!hasStartedAI) {
        await startOnboardingConversation(message, state);
      } else {
        // Process the message normally
        await processUserMessage(message);
      }
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : t("messageFailed");
      setError(errorMessage);
    }
  }, [state, messages, hasStartedAI, t, saveChatMessage]);

  const processUserMessage = async (message: string) => {
    // Prepare conversation history - include ALL AI and user messages for full context
    // ‚ú® IMPROVED: Include component details and response information
    const conversationHistory = messages.map(msg => {
      let content = msg.content || "";
      
      // For AI messages with components, include component context
      if (msg.type === "ai" && msg.component) {
        const component = msg.component;
        
        // Add component title and context to content
        content = `${content}${content ? "\n\n" : ""}[Component: ${component.type}]`;
        if (component.title) {
          content += `\nTitle: ${component.title}`;
        }
        
        // If component is completed, include the user's response
        if (component.isCompleted && component.response) {
          const responseText = getResponseText(component.response);
          content += `\nUser Response: ${responseText}`;
        }
      }
      
      return {
        id: msg.id,
        content: content,
        sender: msg.type === "user" ? "user" as const : "ai" as const,
        timestamp: msg.timestamp.toISOString(),
      };
    });

    // Add current message
    conversationHistory.push({
      id: `current-${Date.now()}`,
      content: message,
      sender: "user" as const,
      timestamp: new Date().toISOString(),
    });

    // üîç DEBUG: Log detailed conversation history to identify issues
    console.log(`üîç Sending full conversation history: ${conversationHistory.length} messages`);
    console.log("üìã Detailed conversation history:");
    conversationHistory.forEach((msg, index) => {
      console.log(`${index + 1}. [${msg.sender}] (${msg.id}): "${msg.content}" (${msg.content.length} chars)`);
    });
    
    // üîç DEBUG: Check for empty or short messages that might be causing issues
    const emptyMessages = conversationHistory.filter(msg => !msg.content || msg.content.length < 5);
    if (emptyMessages.length > 0) {
      console.warn(`‚ö†Ô∏è Found ${emptyMessages.length} messages with empty/short content:`, emptyMessages);
    }
    
    await streamOnboardingAI({
      message,
      conversationHistory,
      userProfile: state.userProfile,
      currentStep: state.step
    });
  };

  const streamOnboardingAI = async (request: {
    message: string;
    conversationHistory: Array<{
      id: string;
      content: string;
      sender: "user" | "ai";
      timestamp: string;
    }>;
    userProfile: UserProfile;
    currentStep: string;
  }) => {
    try {
      setIsAIThinking(true);
      setIsStreaming(true);
      setError(null);

      const response = await fetch('/api/onboarding/ai-stream', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const reader = response.body?.getReader();
      if (!reader) {
        throw new Error('No response body reader');
      }

      const decoder = new TextDecoder();
      let currentAIMessage: OnboardingMessage | null = null;
      let fullContent = "";

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value);
        const lines = chunk.split('\n');

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const data = line.slice(6);
            if (data === '[DONE]') {
              setIsStreaming(false);
              setIsAIThinking(false);
              return;
            }

            try {
              const parsed = JSON.parse(data);
              
              if (parsed.type === 'response_created') {
                // Initialize new AI message
                currentAIMessage = {
                  id: parsed.response_id || `ai-${Date.now()}`,
                  type: "ai",
                  content: "",
                  timestamp: new Date(),
                };
                setMessages(prev => [...prev, currentAIMessage!]);
                fullContent = "";
              } else if (parsed.type === 'response_output_text_streaming') {
                // Update streaming content
                if (currentAIMessage && parsed.response_id === currentAIMessage.id) {
                  fullContent += parsed.content;
                  currentAIMessage.content = fullContent;
                  setMessages(prev => prev.map(msg => 
                    msg.id === currentAIMessage!.id 
                      ? { ...currentAIMessage! }
                      : msg
                  ));
                }
              } else if (parsed.type === 'response_output_text_done') {
                // Finalize text content
                if (currentAIMessage) {
                  currentAIMessage.content = parsed.content;
                  setMessages(prev => prev.map(msg => 
                    msg.id === currentAIMessage!.id 
                      ? { ...currentAIMessage! }
                      : msg
                  ));
                  
                  // Save AI message to database
                  await saveChatMessage('ai', parsed.content);
                }
              } else if (parsed.type === 'show_component') {
                const { payload } = parsed;
                const componentMessage: OnboardingMessage = {
                  id: payload.componentId,
                  type: 'ai',
                  content: payload.title,
                  timestamp: new Date(),
                  component: {
                    id: payload.componentId,
                    type: payload.componentType,
                    title: payload.title,
                    context: payload.context,
                    isCompleted: false
                  }
                };
                setMessages(prev => [...prev, componentMessage]);
                
                // Save component message to database
                await saveChatMessage('ai', payload.title, payload.componentId, {
                  component: {
                    type: payload.componentType,
                    title: payload.title,
                    context: payload.context,
                    isCompleted: false
                  }
                });
              } else if (parsed.type === 'tool_error') {
                console.error("Tool error from server:", parsed);
                
                // Show more detailed error information
                const errorMessage = parsed.error || "Unknown tool error occurred";
                const toolName = parsed.tool_name || "unknown tool";
                
                console.error(`‚ùå Tool Error - ${toolName}: ${errorMessage}`);
                
                // Optionally show details if available
                if (parsed.details) {
                  console.error("Error details:", parsed.details);
                }
                
                // Don't set error or show retry messages - just log it
                // The AI will continue with text instead of showing component
              } else if (parsed.type === 'onboarding_complete') {
                console.log("Onboarding complete signal received from server.");
                onComplete();
                setIsStreaming(false);
                setIsAIThinking(false);
              } else if (parsed.type === 'error') {
                setError(parsed.error);
                const errorMessage: OnboardingMessage = {
                    id: `error-${Date.now()}`,
                    type: 'ai',
                    content: `An unexpected error occurred: ${parsed.error}`,
                    timestamp: new Date(),
                    isError: true,
                };
                setMessages(prev => [...prev, errorMessage]);
              }
            } catch (parseError) {
              console.error('Error parsing SSE data:', parseError);
            }
          }
        }
      }
    } catch (err) {
      console.error('Streaming error:', err);
      setError(err instanceof Error ? err.message : 'Streaming failed');
    } finally {
      setIsStreaming(false);
      setIsAIThinking(false);
    }
  };

  const handleComponentResponse = useCallback(async (
    componentId: string,
    response: ComponentResponse
  ) => {
    try {
      // Save the response to backend
      await onboardingService.saveUserResponse(componentId, response);
      
      // üîß BUILD UPDATED MESSAGES MANUALLY to avoid async state timing issues
      let updatedMessages = [...messages];
      
      // Update component as completed in our manual array
      updatedMessages = updatedMessages.map(msg => {
        if (msg.component?.id === componentId) {
          return {
            ...msg,
            component: {
              ...msg.component,
              isCompleted: true,
              response,
            },
          };
        }
        return msg;
      });

      // Update user profile based on response
      await updateProfileFromResponse(response);
      
      // Get response text for the message
      const responseText = getResponseText(response);
      
      // Add user message to our manual array
      const userMessage: OnboardingMessage = {
        id: `user-${Date.now()}`,
        type: "user",
        content: responseText,
        timestamp: new Date(),
      };
      
      updatedMessages = [...updatedMessages, userMessage];
      
      // Save user response to database
      await saveChatMessage('user', responseText, componentId, {
        componentResponse: response
      });
      
      // üîß UPDATE STATE with complete messages array
      setMessages(updatedMessages);
      
      // üîß BUILD CONVERSATION HISTORY from our updated array (not from state)
      const conversationHistory = updatedMessages.map(msg => {
        let content = msg.content || "";
        
        // For AI messages with components, include component context
        if (msg.type === "ai" && msg.component) {
          const component = msg.component;
          
          // Add component title and context to content
          content = `${content}${content ? "\n\n" : ""}[Component: ${component.type}]`;
          if (component.title) {
            content += `\nTitle: ${component.title}`;
          }
          
          // If component is completed, include the user's response
          if (component.isCompleted && component.response) {
            const completedResponseText = getResponseText(component.response);
            content += `\nUser Response: ${completedResponseText}`;
          }
        }
        
        return {
          id: msg.id,
          content: content,
          sender: msg.type === "user" ? "user" as const : "ai" as const,
          timestamp: msg.timestamp.toISOString(),
        };
      });

      // üîç DEBUG: Log the manually built conversation history
      console.log(`üîß Manually built conversation history: ${conversationHistory.length} messages`);
      console.log("üìã Manual conversation history (with completed components):");
      conversationHistory.forEach((msg, index) => {
        console.log(`${index + 1}. [${msg.sender}] (${msg.id}): "${msg.content}" (${msg.content.length} chars)`);
      });
      
      // If this is the first component response (introduction), start AI conversation
      if (!hasStartedAI && componentId.includes('introduction_template')) {
        // Save the initial conversation history first (welcome + suggestion + component)
        await saveInitialConversationHistory();
        
        // For introduction, use manual conversation history
        await streamOnboardingAI({
          message: responseText,
          conversationHistory,
          userProfile: state.userProfile,
          currentStep: state.step
        });
        setHasStartedAI(true);
      } else {
        // Continue conversation with AI for subsequent responses using manual history
        await streamOnboardingAI({
          message: responseText,
          conversationHistory,
          userProfile: state.userProfile,
          currentStep: state.step
        });
      }
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : t("responseFailed");
      setError(errorMessage);
    }
  }, [state, hasStartedAI, t, messages]);

  const updateProfileFromResponse = async (response: ComponentResponse) => {
    const profileUpdates: Partial<UserProfile> = {};

    // Parse different types of responses
    if (response.textValue) {
      // Extract information from text responses
      const text = response.textValue.toLowerCase();
      
      // Extract name
      if (text.includes("t√™n") || text.includes("name")) {
        const namePatterns = [
          /(?:t√™n|name)(?:\s+(?:l√†|is))?(?:\s+t√¥i)?(?:\s+)?(?:l√†)?(?:\s+)?([^,.\n,]+)/i,
          /t√¥i\s+l√†\s+([^,.\n]+)/i,
          /m√¨nh\s+l√†\s+([^,.\n]+)/i
        ];
        
        for (const pattern of namePatterns) {
          const match = text.match(pattern);
          if (match && match[1]) {
            profileUpdates.name = match[1].trim();
            break;
          }
        }
      }

      // Extract age
      const ageMatch = text.match(/(\d+)\s*tu·ªïi|age.*?(\d+)|(\d+).*?(?:years?\s+old)/i);
      if (ageMatch) {
        const age = parseInt(ageMatch[1] || ageMatch[2] || ageMatch[3]);
        if (age && age >= 15 && age <= 100) {
          profileUpdates.age = age;
        }
      }

      // Extract income
      const incomeMatch = text.match(/thu\s*nh·∫≠p.*?(\d+(?:\.\d+)?)\s*(?:tri·ªáu|tr)|income.*?(\d+(?:\.\d+)?)\s*(?:million|mil)/i);
      if (incomeMatch) {
        const income = parseFloat(incomeMatch[1] || incomeMatch[2]) * 1000000;
        profileUpdates.income = income;
      }

      // Extract expenses  
      const expenseMatch = text.match(/ti√™u.*?(\d+(?:\.\d+)?)\s*(?:tri·ªáu|tr)|spend.*?(\d+(?:\.\d+)?)\s*(?:million|mil)/i);
      if (expenseMatch) {
        const expenses = parseFloat(expenseMatch[1] || expenseMatch[2]) * 1000000;
        profileUpdates.expenses = expenses;
      }
    }

    // Handle other response types
    if (response.financialValue) {
      // This would need context about what type of financial input it was
      // For now, we'll need the component to specify the field
    }

    if (response.selectedOption) {
      // Handle goal selection, risk tolerance, etc.
      // This would need component context to know which field to update
    }

    if (Object.keys(profileUpdates).length > 0) {
      await onboardingService.updateUserProfile(profileUpdates);
      
      setState(prev => ({
        ...prev,
        userProfile: { ...prev.userProfile, ...profileUpdates },
      }));
    }
  };

  const getResponseText = (response: ComponentResponse): string => {
    if (response.textValue) {
      return response.textValue;
    } else if (response.selectedOption) {
      return response.selectedOption;
    } else if (response.financialValue !== undefined && response.financialValue !== null) {
      // ‚ú® IMPROVED: More descriptive financial value formatting
      const formattedValue = response.financialValue.toLocaleString('vi-VN');
      return `${formattedValue} VND`;
    } else if (response.rating !== undefined && response.rating !== null) {
      return `Rated ${response.rating}/5`;
    } else if (response.sliderValue !== undefined && response.sliderValue !== null) {
      return `${response.sliderValue}%`;
    }
    return "Completed"; // More descriptive than "ok"
  };

  return {
    state,
    messages,
    isLoading,
    isAIThinking,
    isStreaming,
    error,
    sendMessage,
    handleComponentResponse,
  };
}; 